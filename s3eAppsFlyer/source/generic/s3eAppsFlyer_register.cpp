/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eAppsFlyer_autodefs.h"
#include "s3eEdk.h"
#include "s3eAppsFlyer.h"
//Declarations of Init and Term functions
extern s3eResult s3eAppsFlyerInit();
extern void s3eAppsFlyerTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult s3eAppsFlyerStartSession_wrap(const char* appleAppId, const char* devKey, const char* currencyCode, s3eBool isHTTPS, const char* customerUserID)
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: s3eAppsFlyerStartSession"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAppsFlyerStartSession, 5, appleAppId, devKey, currencyCode, isHTTPS, customerUserID);
}

static void s3eAppsFlyerSetHTTPS_wrap(s3eBool isHTTPS)
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: s3eAppsFlyerSetHTTPS"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAppsFlyerSetHTTPS, 1, isHTTPS);
}

static void s3eAppsFlyerSetTrackingDisable_wrap(s3eBool _disable)
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: s3eAppsFlyerSetTrackingDisable"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAppsFlyerSetTrackingDisable, 1, _disable);
}

static void s3eAppsFlyerSetIsDebug_wrap(s3eBool _isDebug)
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: s3eAppsFlyerSetIsDebug"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAppsFlyerSetIsDebug, 1, _isDebug);
}

static void s3eAppsFlyerSetCurrencyCode_wrap(const char* currencyCode)
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: s3eAppsFlyerSetCurrencyCode"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAppsFlyerSetCurrencyCode, 1, currencyCode);
}

static void s3eAppsFlyerSetCustomerUserID_wrap(const char* customerUserID)
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: s3eAppsFlyerSetCustomerUserID"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAppsFlyerSetCustomerUserID, 1, customerUserID);
}

static void s3eAppsFlyerTrackEvent_wrap(const char* eventName, const char* value)
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: s3eAppsFlyerTrackEvent"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAppsFlyerTrackEvent, 2, eventName, value);
}

static const char * getAppsFlyerUID_wrap()
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: getAppsFlyerUID"));
    return (const char *)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)getAppsFlyerUID, 0);
}

static void s3eAppsFlyerLoadConversionData_wrap()
{
    IwTrace(APPSFLYER_VERBOSE, ("calling s3eAppsFlyer func on main thread: s3eAppsFlyerLoadConversionData"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAppsFlyerLoadConversionData, 0);
}

#define s3eAppsFlyerStartSession s3eAppsFlyerStartSession_wrap
#define s3eAppsFlyerSetHTTPS s3eAppsFlyerSetHTTPS_wrap
#define s3eAppsFlyerSetTrackingDisable s3eAppsFlyerSetTrackingDisable_wrap
#define s3eAppsFlyerSetIsDebug s3eAppsFlyerSetIsDebug_wrap
#define s3eAppsFlyerSetCurrencyCode s3eAppsFlyerSetCurrencyCode_wrap
#define s3eAppsFlyerSetCustomerUserID s3eAppsFlyerSetCustomerUserID_wrap
#define s3eAppsFlyerTrackEvent s3eAppsFlyerTrackEvent_wrap
#define getAppsFlyerUID getAppsFlyerUID_wrap
#define s3eAppsFlyerLoadConversionData s3eAppsFlyerLoadConversionData_wrap

#endif

s3eResult s3eAppsFlyerRegister(s3eAppsFlyerCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_APPSFLYER_HASH, S3E_APPSFLYER_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eAppsFlyerUnRegister(s3eAppsFlyerCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_APPSFLYER_HASH, S3E_APPSFLYER_CALLBACK_MAX, cbid, fn);
}

void s3eAppsFlyerRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[11];
    funcPtrs[0] = (void*)s3eAppsFlyerRegister;
    funcPtrs[1] = (void*)s3eAppsFlyerUnRegister;
    funcPtrs[2] = (void*)s3eAppsFlyerStartSession;
    funcPtrs[3] = (void*)s3eAppsFlyerSetHTTPS;
    funcPtrs[4] = (void*)s3eAppsFlyerSetTrackingDisable;
    funcPtrs[5] = (void*)s3eAppsFlyerSetIsDebug;
    funcPtrs[6] = (void*)s3eAppsFlyerSetCurrencyCode;
    funcPtrs[7] = (void*)s3eAppsFlyerSetCustomerUserID;
    funcPtrs[8] = (void*)s3eAppsFlyerTrackEvent;
    funcPtrs[9] = (void*)getAppsFlyerUID;
    funcPtrs[10] = (void*)s3eAppsFlyerLoadConversionData;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[11] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eAppsFlyer", funcPtrs, sizeof(funcPtrs), flags, s3eAppsFlyerInit, s3eAppsFlyerTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eAppsFlyerStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eAppsFlyerRegisterExt;
    return 0;
}

int g_s3eAppsFlyerVal = s3eAppsFlyerStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eAppsFlyerRegisterExt();
}
#endif

#endif
